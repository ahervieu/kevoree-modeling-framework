#* @vtlvariable name="packageName" type="java.lang.String" *#
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="formatedName" type="java.lang.String" *#
#* @vtlvariable name="formatedName2" type="java.lang.String" *#
#* @vtlvariable name="formatedName3" type="java.lang.String" *#
#* @vtlvariable name="formatedFactoryNameImpl" type="java.lang.String" *#

#* @vtlvariable name="modelVersion" type="java.lang.String" *#
#* @vtlvariable name="js" type="java.lang.Boolean" *#
#* @vtlvariable name="classes" type="java.util.List<org.eclipse.emf.ecore.EClassifier>" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="helper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#

package ${packageName}.factory;

import org.kevoree.modeling.api.TransactionManager
import org.kevoree.modeling.api.Transaction
import org.kevoree.modeling.api.TimeTransaction
import org.kevoree.modeling.api.persistence.DataStore
import org.kevoree.modeling.api.time.TimeView

class ${formatedName}(val datastore : DataStore) : TransactionManager {

    private var isClosed : Boolean = false

    override fun createTransaction(): ${formatedName2} {
        if(isClosed){
            throw Exception("This TransactionManager is closed !");
        }
        return ${formatedName2}(datastore);
    }

    override fun close() {
        if(!isClosed){
            isClosed = true
            datastore.sync()
        }
    }
}

class ${formatedName2}(#if($ctx.persistence) #if(!$ctx.timeAware) override #end internal val datastore : DataStore #end) : #if($ctx.timeAware) TimeTransaction #else Default${formatedFactoryNameImpl}(datastore),Transaction #end {


    #if($ctx.timeAware)
        val sharedCache = org.kevoree.modeling.api.time.blob.SharedCache()

        override fun time(timepoint: Long): ${formatedName3} {
            val resolved : ${formatedName3}? = sharedCache.get(timepoint) as? ${formatedName3};
            if(resolved != null){
                return resolved;
            } else {
                 val temp = Default${formatedFactoryNameImpl}(datastore #if($ctx.timeAware) ,sharedCache,timepoint #end );
                 sharedCache.add(timepoint,temp);
                 return temp;
            }
        }

        override fun globalTimeTree(): org.kevoree.modeling.api.time.TimeTree {
            return timeTree(org.kevoree.modeling.api.time.TimeSegmentConst.GLOBAL_TIMEMETA)
        }
        override fun timeTree(path: String): org.kevoree.modeling.api.time.TimeTree {
            val alreadyCached = sharedCache.timeCache.get(path);
            if (alreadyCached != null) {
                return alreadyCached;
            } else {
                val timeMetaPayLoad = datastore.get(org.kevoree.modeling.api.time.TimeSegment.TIMEMETA.name(), path);
                val blob = org.kevoree.modeling.api.time.blob.TimeMeta();
                if (timeMetaPayLoad != null) {
                    blob.load(timeMetaPayLoad);
                }
                sharedCache.timeCache.put(path, blob);
                return blob;
            }
        }

    override fun commit() {
        for (tv in sharedCache.keys()) {
            (sharedCache.get(tv) as? org.kevoree.modeling.api.persistence.PersistenceKMFFactory )?.commit();
        }
        for (tv in sharedCache.keys()) {
            (sharedCache.get(tv) as? org.kevoree.modeling.api.persistence.PersistenceKMFFactory )?.endCommit();
        }
    }
    override fun close() {
        for (tv in sharedCache.keys()) {
            (sharedCache.get(tv) as? org.kevoree.modeling.api.persistence.PersistenceKMFFactory )?.clear();
        }
        sharedCache.flush()
        datastore.sync()
    }
    #else
        #if($ctx.persistence)
             override fun close() {
                clear();
                datastore!!.sync();
            }
        #end

    #end

}


#if($ctx.timeAware)
trait ${formatedName3} : TimeView,${formatedFactoryName} {}
#end