#* @vtlvariable name="optionalRelationShipNameGen" type="java.lang.Boolean" *#
#* @vtlvariable name="relationShipOptionalName" type="java.lang.String" *#
#* @vtlvariable name="eRefs" type="org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EReference>" *#
#* @vtlvariable name="eSub" type="org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.EReference>" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="FQNHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#


override fun selectByQuery(query : String) : MutableList<Any> {
    val collected = java.util.ArrayList<Any>()
    internal_selectByQuery(query,collected);
    return collected;
}

override fun internal_selectByQuery(query : String, result : MutableList<Any>) {
    try {
        val firstSepIndex = query.indexOf('[')
        var queryID = ""
        var extraReadChar = 2
        #if($optionalRelationShipNameGen)
        val relationName = ${FQNHelper.fqn($ctx, $ctx.basePackageForUtilitiesGeneration)}.util.Constants.Ref_${relationShipOptionalName}
        val optionalDetected = ( firstSepIndex != ${relationShipOptionalName.length()} )
        if(optionalDetected){ extraReadChar = extraReadChar - 2 }
        if(query.indexOf('{') == 0){
        #else
        val relationName = query.substring(0,query.indexOf('['))
        if(query.indexOf('{') == firstSepIndex +1){
        #end
            queryID = query.substring(query.indexOf('{')+1,query.indexOf('}'))
            extraReadChar = extraReadChar + 2
        } else {
        #if($optionalRelationShipNameGen)
            if(optionalDetected){
                if(query.indexOf('/') != - 1){
                    queryID = query.substring(0,query.indexOf('/'))
                } else {
                    queryID = query.substring(0,query.size)
                }
            } else {
                queryID = query.substring(query.indexOf('[')+1,query.indexOf(']'))
            }
        #else
            queryID = query.substring(query.indexOf('[')+1,query.indexOf(']'))
        #end
        }
        #if($optionalRelationShipNameGen)
        var subquery = query.substring((if(optionalDetected){0} else {relationName.size})+queryID.size+extraReadChar,query.size)
        #else
        var subquery = query.substring(relationName.size+queryID.size+extraReadChar,query.size)
        #end
        if (subquery.indexOf('/') != -1){
            subquery = subquery.substring(subquery.indexOf('/')+1,subquery.size)
        }
        when(relationName) {
            #foreach( $ref in $eRefs )
                ${FQNHelper.fqn($ctx, $ctx.basePackageForUtilitiesGeneration)}.util.Constants.Ref_${ref.getName()} -> {
                #if(!$ref.isMany())
                    var subResult = ${ctx.kevoreeCacheResolver}.filter(queryID,java.util.Collections.singleton(${FQNHelper.protectReservedWords($ref.getName())})!!)
                    result.add(subResult)
                #else
                    var subResult : MutableCollection<Any>? = null
                    #if(${ref.getEReferenceType().getEIDAttribute()})
                        #if($ref.isMany())
                            val tempObj = find${ref.getName().substring(0, 1).toUpperCase()}${ref.getName().substring(1)}ByID(queryID)
                            if(tempObj!=null){
                                subResult = java.util.ArrayList<Any>()
                                subResult!!.add(tempObj)
                            }
                        #end
                    #end
                    if(subResult == null){
                    #if(${ref.getEReferenceType().getEIDAttribute()})
                        subResult = ${ctx.kevoreeCacheResolver}.filter(queryID,_${ref.getName()}.values()) as MutableCollection<Any>
                    #else
                        subResult = ${ctx.kevoreeCacheResolver}.filter(queryID,_${ref.getName()}) as MutableCollection<Any>
                    #end
                    }
                    if(subquery != ""){
                        for(subObj in subResult!!){
                            (subObj as ${ctx.getKevoreeContainerImplFQN()}).internal_selectByQuery(subquery,result)
                        }
                    } else {
                    result.addAll(subResult!!)
                    }
                #end
                    return
                }
            #end
                ${FQNHelper.fqn($ctx, $ctx.basePackageForUtilitiesGeneration)}.util.Constants.KMFQL_CONTAINED -> {
                    var subResult : MutableCollection<Any> = java.util.ArrayList<Any>()
                    #foreach( $subRef in $eSub )
                        #if(!$subRef.isMany())
                            if(${FQNHelper.protectReservedWords($subRef.getName())}!=null){
                                subResult.addAll(${ctx.kevoreeCacheResolver}.filter(queryID,java.util.Collections.singleton(${FQNHelper.protectReservedWords($subRef.getName())})!!)!!)
                            }
                        #else
                            subResult.addAll(${ctx.kevoreeCacheResolver}.filter(queryID,${FQNHelper.protectReservedWords($subRef.getName())})!!)
                        #end

                    #end
                    if(subquery != ""){
                        for(subObj in subResult!!){
                            (subObj as ${ctx.getKevoreeContainerImplFQN()}).internal_selectByQuery(subquery,result)
                        }
                    } else {
                        result.addAll(subResult!!)
                    }
                    return
                }
            else -> {return}
        }
    } catch(e:Exception){
        return
    }
}
