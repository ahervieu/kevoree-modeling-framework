#* @vtlvariable name="currentClass" type="org.eclipse.emf.ecore.EClass" *#
#* @vtlvariable name="FQNHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="packElem" type="java.lang.String" *#

#if(!$currentClass.getEAllContainments().isEmpty())
override fun visit(visitor : org.kevoree.modeling.api.util.ModelVisitor, recursive : Boolean, onlyContainedRef : Boolean){
            #foreach( $ref in $currentClass.getEAllContainments())
                #if($ref.isMany())
                    for(KMFLoopEntryKey in _${ref.getName()}.keySet()){
                        internal_visit(visitor,_${ref.getName()}.get(KMFLoopEntryKey),recursive,onlyContainedRef,${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.util.Constants.Ref_${ref.getName()})
                    }
                #else
                    internal_visit(visitor,${FQNHelper.protectReservedWords(${ref.getName()})},recursive,onlyContainedRef,${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.util.Constants.Ref_${ref.getName()})
                #end
            #end
           #set($firstGeneratedRef = true)
                #foreach( $ref in $currentClass.getEAllReferences())
                    #if(!$currentClass.getEAllContainments().contains($ref))
                        #if($firstGeneratedRef)
           if(!onlyContainedRef){
                            #set($firstGeneratedRef = false)
                        #end
                        #if($ref.isMany())
                            for(KMFLoopEntryKey in _${ref.getName()}.keySet()){
                                internal_visit(visitor,_${ref.getName()}.get(KMFLoopEntryKey),recursive,onlyContainedRef,${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.util.Constants.Ref_${ref.getName()})
                            }
                        #else
                            internal_visit(visitor,${FQNHelper.protectReservedWords(${ref.getName()})},recursive,onlyContainedRef,${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.util.Constants.Ref_${ref.getName()})
                        #end
                    #end
                #end
           #if(!$firstGeneratedRef)
           }
           #end
}
#end





