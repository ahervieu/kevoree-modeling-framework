#* @vtlvariable name="packageName" type="java.lang.String" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="helper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#

package ${packageName}.compare

import java.util.HashMap
import java.util.ArrayList
import org.kevoree.modeling.api.KMFContainer
import org.kevoree.modeling.api.trace.*

/**
 * Created by duke on 26/07/13.
 */


class DefaultModelCompare : org.kevoree.modeling.api.compare.ModelCompare {

override public fun createSequence(): org.kevoree.modeling.api.trace.TraceSequence {
    return ${packageName}.trace.DefaultTraceSequence()
}

override public fun diff(origin: KMFContainer, target: KMFContainer): TraceSequence {
        return createSequence().populate(internal_diff(origin, target, false,false));
    }

override public fun merge(origin: KMFContainer, target: KMFContainer): TraceSequence {
        return createSequence().populate(internal_diff(origin, target, false,true));
}

override public fun inter(origin: KMFContainer, target: KMFContainer): TraceSequence {
        return createSequence().populate(internal_diff(origin, target, true,false));
    }

    private fun internal_diff(origin: KMFContainer, target: KMFContainer, inter: Boolean, merge : Boolean): List<ModelTrace> {
        val traces = ArrayList<ModelTrace>()
        val tracesRef = ArrayList<ModelTrace>()
        val objectsMap = HashMap<String, ${ctx.getKevoreeContainerImplFQN()}>()
        traces.addAll((origin as ${ctx.getKevoreeContainerImplFQN()} ).generateDiffTraces(target, inter,false))
        tracesRef.addAll((origin as ${ctx.getKevoreeContainerImplFQN()} ).generateDiffTraces(target, inter,true))

        val visitor = object : org.kevoree.modeling.api.util.ModelVisitor(){
            override public fun visit(elem : org.kevoree.modeling.api.KMFContainer, refNameInParent : String, parent : org.kevoree.modeling.api.KMFContainer){
                val childPath = elem.path();
                if(childPath != null){
                    objectsMap.put(childPath, elem as ${ctx.getKevoreeContainerImplFQN()});
                } else {
                    throw Exception("Null child path " + elem);
                }
            }
        }
        origin.visit(visitor,true,true,false)

        val visitor2 = object : org.kevoree.modeling.api.util.ModelVisitor(){
            override public fun visit(elem : org.kevoree.modeling.api.KMFContainer, refNameInParent : String, parent : org.kevoree.modeling.api.KMFContainer){
                val childPath = elem.path();
                if(childPath != null){
                    if(objectsMap.containsKey(childPath)){
                        if(inter){
                            traces.add(ModelAddTrace(parent.path()!!, refNameInParent, elem.path(), elem.metaClassName()))
                        }
                        traces.addAll(objectsMap.get(childPath)!!.generateDiffTraces(elem, inter,false))
                        tracesRef.addAll(objectsMap.get(childPath)!!.generateDiffTraces(elem, inter,true))
                        objectsMap.remove(childPath) //drop from to process elements
                    } else {
                        if(!inter){
                            traces.add(ModelAddTrace(parent.path()!!, refNameInParent, elem.path(), elem.metaClassName()))
                            traces.addAll((elem as ${ctx.getKevoreeContainerImplFQN()}).generateDiffTraces(elem as KMFContainer, true,false))
                            tracesRef.addAll((elem as ${ctx.getKevoreeContainerImplFQN()}).generateDiffTraces(elem as KMFContainer, true,true))
                        }
                    }
                } else {
                    throw Exception("Null child path " + elem);
                }
            }
        }
        target.visit(visitor2,true,true,false)
        if(!inter){
            //if diff
            if(!merge){
                for(diffChild in objectsMap.values()){
                    traces.add(ModelRemoveTrace(diffChild.eContainer()!!.path()!!, diffChild.getRefInParent()!!, (diffChild as KMFContainer).path()!!))
                }
            }
        }
        traces.addAll(tracesRef);
        return traces;
    }

}
