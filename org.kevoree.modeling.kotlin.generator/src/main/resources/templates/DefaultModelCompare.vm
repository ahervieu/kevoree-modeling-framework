#* @vtlvariable name="packageName" type="java.lang.String" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="helper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#

package ${packageName}.compare

import java.util.HashMap
import java.util.ArrayList
import org.kevoree.modeling.api.KMFContainer
import org.kevoree.modeling.api.trace.*

/**
 * Created by duke on 26/07/13.
 */


class DefaultModelCompare : org.kevoree.modeling.api.compare.ModelCompare {

override public fun createSequence(): org.kevoree.modeling.api.trace.TraceSequence {
    return ${packageName}.trace.DefaultTraceSequence()
}

override public fun diff(origin: KMFContainer, target: KMFContainer): TraceSequence {
        return createSequence().populate(internal_diff(origin, target, false,false));
    }

override public fun merge(origin: KMFContainer, target: KMFContainer): TraceSequence {
        return createSequence().populate(internal_diff(origin, target, false,true));
}

override public fun inter(origin: KMFContainer, target: KMFContainer): TraceSequence {
        return createSequence().populate(internal_diff(origin, target, true,false));
    }

    private fun internal_diff(origin: KMFContainer, target: KMFContainer, inter: Boolean, merge : Boolean): List<ModelTrace> {
        val traces = ArrayList<ModelTrace>()
        val tracesRef = ArrayList<ModelTrace>()
        val objectsMap = HashMap<String, ${ctx.getKevoreeContainerImplFQN()}>()
        traces.addAll((origin as ${ctx.getKevoreeContainerImplFQN()} ).generateDiffTraces(target, inter,false))
        tracesRef.addAll((origin as ${ctx.getKevoreeContainerImplFQN()} ).generateDiffTraces(target, inter,true))
            #if($ctx.jS)
                for(child in collectAll(origin)){
            #else
                for(child in origin.containedAllElements()){
            #end
                    val childPath = child.path();
                    if(childPath != null){
                        objectsMap.put(child.path()!!, child as ${ctx.getKevoreeContainerImplFQN()});
                    } else {
                        throw Exception("Null child path " + child);
                    }
                }
            #if($ctx.jS)
                for(child in collectAll(target)){
            #else
                for(child in target.containedAllElements()){
            #end
            val childPath = child.path();
            if(childPath != null){
                if(objectsMap.containsKey(childPath)){
                    if(inter){
                        traces.add(ModelAddTrace(child.eContainer()!!.path()!!, child.getRefInParent()!!, child.path(), child.metaClassName()))
                    }
                    traces.addAll(objectsMap.get(childPath)!!.generateDiffTraces(child, inter,false))
                    tracesRef.addAll(objectsMap.get(childPath)!!.generateDiffTraces(child, inter,true))
                    objectsMap.remove(childPath) //drop from to process elements
                } else {
                    if(!inter){
                        traces.add(ModelAddTrace(child.eContainer()!!.path()!!, child.getRefInParent()!!, child.path(), child.metaClassName()))
                        traces.addAll((child as ${ctx.getKevoreeContainerImplFQN()}).generateDiffTraces(child as KMFContainer, true,false))
                        tracesRef.addAll((child as ${ctx.getKevoreeContainerImplFQN()}).generateDiffTraces(child as KMFContainer, true,true))
                    }
                }
            } else {
                throw Exception("Null child path " + child);
            }
        }
        if(!inter){
            //if diff
            if(!merge){
                for(diffChild in objectsMap.values()){
                    traces.add(ModelRemoveTrace(diffChild.eContainer()!!.path()!!, diffChild.getRefInParent()!!, (diffChild as KMFContainer).path()!!))
                }
            }
        }
        traces.addAll(tracesRef);
        return traces;
    }
                #if($ctx.jS)
                    private fun collectAll(obj : KMFContainer) : List<KMFContainer> {
                        val result = java.util.ArrayList<KMFContainer>()
                        for(child in obj.containedElementsList()){
                            if(child is ArrayList<*>){
                                for(subChild in (child as ArrayList<*>) ){
                                    var casted = subChild as KMFContainer
                                    result.add(casted)
                                    result.addAll(collectAll(casted))
                                }
                            } else {
                                var casted = child as KMFContainer
                                result.add(casted)
                                result.addAll(collectAll(casted))
                            }
                        }
                        return result
                    }
                #end

}
