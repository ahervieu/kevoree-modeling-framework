#* @vtlvariable name="packageName" type="java.lang.String" *#
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="modelVersion" type="java.lang.String" *#
#* @vtlvariable name="js" type="java.lang.Boolean" *#
#* @vtlvariable name="classes" type="java.util.List<org.eclipse.emf.ecore.EClassifier>" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="helper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#

package ${packageName}.impl;

#foreach( $class in $classes )
import ${packageName}.${class.getName()};
#end

import ${packageName}.${formatedFactoryName};

#if(!$js)open#end class Default${formatedFactoryName} : ${formatedFactoryName} {

override fun getVersion() : String { return "${modelVersion}" }

#foreach( $class in $classes )
override fun create${class.getName()}() : ${class.getName()} { return ${class.getName()}Impl() }
#end

override fun create(metaClassName : String) : ${ctx.getKevoreeContainer().get()}? {
when(metaClassName){
#foreach( $class in $classes )
    ${helper.fqn($ctx,$ctx.getBasePackageForUtilitiesGeneration())}.util.Constants.${helper.fqn($ctx,$class).replace(".","_")} -> { return create${class.getName()}() }
    ${helper.fqn($ctx,$ctx.getBasePackageForUtilitiesGeneration())}.util.Constants.CN_$class.getName() -> { return create${class.getName()}() }

#end            else -> {return null;}
}
}

#if($ctx.persistence())

    override var datastore: org.kevoree.modeling.api.persistence.DataStore? = null

    override var compare: org.kevoree.modeling.api.compare.ModelCompare = ${packageName}.compare.DefaultModelCompare()

#end


}