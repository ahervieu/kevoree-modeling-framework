#* @vtlvariable name="packageName" type="java.lang.String" *#
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="modelVersion" type="java.lang.String" *#
#* @vtlvariable name="js" type="java.lang.Boolean" *#
#* @vtlvariable name="classes" type="java.util.List<org.eclipse.emf.ecore.EClassifier>" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="helper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#

package ${packageName}.impl;

#foreach( $class in $classes )
import ${packageName}.${class.getName()};
#end

import ${packageName}.${formatedFactoryName};

#if(!$js)open#end class Default${formatedFactoryName} : ${formatedFactoryName} {

override fun getVersion() : String { return "${modelVersion}" }

#if($ctx.persistence)
override val elem_cache: java.util.HashMap<String, org.kevoree.modeling.api.KMFContainer> = java.util.HashMap<String, org.kevoree.modeling.api.KMFContainer>()
override val modified_elements: java.util.HashMap<String, org.kevoree.modeling.api.KMFContainer> = java.util.HashMap<String, org.kevoree.modeling.api.KMFContainer>()
override val elementsToBeRemoved : MutableSet<String> = java.util.HashSet<String>()
#end

#foreach( $class in $classes )
override fun create${class.getName()}() : ${class.getName()} {
val tempElem = ${class.getName()}Impl()
    #if($ctx.persistence)
initObject(tempElem)
    #end
return tempElem
}
#end

override fun create(metaClassName : String) : ${ctx.kevoreeContainer}? {
when(metaClassName){
#foreach( $class in $classes )
    ${helper.fqn($ctx,$ctx.getBasePackageForUtilitiesGeneration())}.util.Constants.${helper.fqn($ctx,$class).replace(".","_")} -> { return create${class.getName()}() }
    ${helper.fqn($ctx,$ctx.getBasePackageForUtilitiesGeneration())}.util.Constants.CN_$class.getName() -> { return create${class.getName()}() }

#end            else -> {return null;}
}
}

#if($ctx.persistence)

    override var datastore: org.kevoree.modeling.api.persistence.DataStore? = org.kevoree.modeling.api.persistence.MemoryDataStore()

    override var compare: org.kevoree.modeling.api.compare.ModelCompare = ${helper.fqn($ctx,$ctx.getBasePackageForUtilitiesGeneration())}.compare.DefaultModelCompare()

    protected fun initObject(elem : org.kevoree.modeling.api.persistence.KMFContainerProxy){
        elem.originFactory = this
        monitor(elem)
        #if($ctx.timeAware)
        (elem as org.kevoree.modeling.api.time.TimeAwareKMFContainer).isResolved = true
        (elem as org.kevoree.modeling.api.time.TimeAwareKMFContainer).now = relativeTime
        (elem as org.kevoree.modeling.api.time.TimeAwareKMFContainer).meta = org.kevoree.modeling.api.time.blob.EntityMeta()
        (elem as org.kevoree.modeling.api.time.TimeAwareKMFContainer).meta!!.metatype = elem.metaClassName()
        #end
    }

#end

#if($ctx.timeAware)
override var relativeTime: org.kevoree.modeling.api.time.TimePoint = org.kevoree.modeling.api.time.TimePoint.create("0:0");
override var queryMap: MutableMap<String, org.kevoree.modeling.api.time.TimePoint> = java.util.HashMap<String, org.kevoree.modeling.api.time.TimePoint>()
override var timeCache: java.util.HashMap<String, org.kevoree.modeling.api.time.blob.TimeMeta> = java.util.HashMap<String, org.kevoree.modeling.api.time.blob.TimeMeta>()
override var entitiesCache: java.util.HashMap<String, org.kevoree.modeling.api.time.blob.EntitiesMeta> = java.util.HashMap<String, org.kevoree.modeling.api.time.blob.EntitiesMeta>()

override fun time(tp: org.kevoree.modeling.api.time.TimePoint): org.kevoree.modeling.api.time.TimeView<${formatedFactoryName}> {
    val newFactory = Default${formatedFactoryName}()
    newFactory.datastore = this.datastore;
    newFactory.relativeTime = tp;
    return newFactory;
}

#end


override fun setRoot(elem : org.kevoree.modeling.api.KMFContainer){
    (elem as ${ctx.getKevoreeContainerImplFQN()}).is_root = true
    (elem as ${ctx.getKevoreeContainerImplFQN()}).path_cache = "/"
}


}