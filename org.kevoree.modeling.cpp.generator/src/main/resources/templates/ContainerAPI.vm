
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="packElem" type="java.lang.String" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="FQNHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#

package ${packElem};

#if(${ctx.usemicrofwk()})
    trait ${formatedFactoryName} : org.kevoree.modeling.api.KMFContainer {
#else
    trait ${formatedFactoryName} {

        fun setRecursiveReadOnly() : Unit
        fun eContainer() : ${formatedFactoryName}?
        fun isReadOnly() : Boolean
        fun isRecursiveReadOnly() : Boolean
        fun setInternalReadOnly()
        fun delete()
        fun modelEquals(similarObj : Any?) : Boolean
        fun deepModelEquals(similarObj : Any?) : Boolean
        fun getRefInParent() : String?

        fun findByPath(query : String) : Any?
        fun path() : String?
        fun metaClassName() : String
        fun reflexiveMutator(mutatorType : Int, refName : String, value : Any?)

        fun containedElementsList() : List<Any>
        fun referencedElementsList() : List<Any>

#end


#if(${ctx.genSelector})
    fun selectByQuery(query : String) : List<Any>
#end
#if(!${ctx.jS})
    fun findByPath<A>(query : String, clazz : Class<A>) : A?
    fun containedElements() : Iterable<${packElem}.${formatedFactoryName}>
    fun containedAllElements() : Iterable<${packElem}.${formatedFactoryName}>
#end
#if(${ctx.jS})
#else

#end

#if(${ctx.generateEvents()})
    fun addModelElementListener(lst : ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.events.ModelElementListener)
    fun removeModelElementListener(lst : ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.events.ModelElementListener )
    fun removeAllModelElementListeners()
    fun addModelTreeListener(lst : ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.events.ModelTreeListener)
    fun removeModelTreeListener(lst : ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.events.ModelTreeListener)
    fun removeAllModelTreeListeners()
#end

}