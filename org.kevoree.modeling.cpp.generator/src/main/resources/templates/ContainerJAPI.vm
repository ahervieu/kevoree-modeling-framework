#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="packElem" type="java.lang.String" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="FQNHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#

package ${packElem};

import java.util.*;
import java.lang.*;

#if(${ctx.usemicrofwk()})
public interface ${formatedFactoryName} extends org.kevoree.modeling.api.${formatedFactoryName} {
#else
public interface ${formatedFactoryName} {
#end


public void setRecursiveReadOnly();
public ${formatedFactoryName} eContainer();

public String getRefInParent();

@org.jetbrains.annotations.NotNull
public String metaClassName();

@org.jetbrains.annotations.NotNull
public boolean isReadOnly();

@org.jetbrains.annotations.NotNull
public boolean isRecursiveReadOnly();

public void setInternalReadOnly();
public void delete();

public void reflexiveMutator(@org.jetbrains.annotations.NotNull int mutatorType, @org.jetbrains.annotations.NotNull String refName, Object value);

@org.jetbrains.annotations.NotNull
public boolean modelEquals(Object similarObj);
@org.jetbrains.annotations.NotNull
public boolean deepModelEquals(Object similarObj);

@org.jetbrains.annotations.NotNull
public Iterable<${packElem}.${formatedFactoryName}> containedElements();

@org.jetbrains.annotations.NotNull
public Iterable<${packElem}.${formatedFactoryName}> containedAllElements();

@org.jetbrains.annotations.NotNull
public List
<Object> containedElementsList();

    #if(${ctx.genSelector})
        @org.jetbrains.annotations.NotNull
        public List
    <Object> selectByQuery(@org.jetbrains.annotations.NotNull String query);
    #end

    public <A> A findByPath(@org.jetbrains.annotations.NotNull String query, @org.jetbrains.annotations.NotNull Class<A>
        clazz);

        Object findByPath(@org.jetbrains.annotations.NotNull String query);
        public String path();


        #if(${ctx.generateEvents()})
            public void
            addModelElementListener(@org.jetbrains.annotations.NotNull ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}
            .events.ModelElementListener lst);
            public void
            removeModelElementListener(@org.jetbrains.annotations.NotNull ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}
            .events.ModelElementListener lst);
            public void removeAllModelElementListeners();
            public void
            addModelTreeListener(@org.jetbrains.annotations.NotNull ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}
            .events.ModelTreeListener lst);
            public void
            removeModelTreeListener(@org.jetbrains.annotations.NotNull ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}
            .events.ModelTreeListener lst);
            public void removeAllModelTreeListeners();
        #end

        }