//*
// Fabien Fleurey - 20/08/2011
// Core library.
//
// This file provides an interface with the Arduino core to use digital output. 
// All more external things which use digital output should pass by this way.
//*

thing fragment DigitalOutputMsgs 
{
	message set_digital_output (value : DigitalState);
}

thing DigitalOutput includes DigitalOutputMsgs
{	
	provided port DigitalOutput 
	{
		receives set_digital_output
	}
}


//*
// Fabien Fleurey - 22/08/2011
// Electronic bricks library.
//
// This file provides an interface with the LED. 
//*
thing fragment LedMsgs
{
	message led_on ();
	message led_off ();
	message led_toggle ();
}

thing fragment LedClient includes LedMsgs
{   
	required port Led @sync_send "true"
    {
		sends led_on, led_off, led_toggle
	}
}

thing fragment Led includes LedMsgs
{   
	provided port Led 
    {
		receives led_on, led_off, led_toggle
	}
}

thing LedUC includes Led, DigitalOutputMsgs
{   
    required port DigitalOutput
    {
        sends set_digital_output    
    }
    
    statechart LedImpl init LedOff 
    {    
        state LedOff 
        {
            on entry DigitalOutput!set_digital_output (DigitalState:LOW)
            transition switch_on -> LedOn 
            event Led?led_on 
            event Led?led_toggle
            
        }
        
        state LedOn 
        {
            on entry DigitalOutput!set_digital_output (DigitalState:HIGH)
            transition switch_off -> LedOff 
            event Led?led_off 
            event Led?led_toggle
        }
    }
}


//*
// Fabien Fleurey - 20/08/2011
// Core library.
//
// This file provides an interface to use analog input. 
// All more external things which use analog input should pass by this way.
// 
// Three modes are available to fit your needs: simple, periodic and on change.
//*

thing fragment AnalogInputMsgs
{
	message read_analog_input ();
	message analog_input_value (value : Int16);
}

thing fragment AnalogInput includes AnalogInputMsgs
{
	provided port AnalogInput 
	{
		receives read_analog_input
		sends analog_input_value 
	}
}


thing PeriodicAnalogInput includes AnalogInputMsgs, TimerMsgs
{
	readonly property refresh_rate : Long = 5000

	provided port PeriodicAnalogInput 
	{
		sends analog_input_value 
	}

	required port Timer
	{
		receives timer_timeout
		sends timer_start
	}
	
	required port AnalogInput 
	{
		sends read_analog_input
		receives analog_input_value 
	}
	
	statechart PeriodicAnalogInputImpl init Running
	{	
		state Running
		{
			on entry Timer!timer_start (refresh_rate)
			
			transition wait -> Waiting
			event Timer?timer_timeout
			action AnalogInput!read_analog_input()
		}
		
		state Waiting
		{
			transition got -> Running 
			event m : AnalogInput?analog_input_value
			action PeriodicAnalogInput!analog_input_value (m.value)
		}
	}
}

thing OnChangeAnalogInput includes AnalogInputMsgs, TimerMsgs
{
	readonly property refresh_rate : UInt8 = 20
	
	provided port OnChangeAnalogInput 
	{
		sends analog_input_value 
	}

	required port Timer
	{
		receives timer_timeout
		sends timer_start
	}
	
	required port AnalogInput 
	{
		sends read_analog_input
		receives analog_input_value 
	}
	
	statechart OnChangeAnalogInputImpl init Running
	{
	
		property oldValue : Int16 = -1
		
		state Running
		{
			on entry Timer!timer_start (refresh_rate)
			
			transition wait -> Waiting 
			event Timer?timer_timeout
			action AnalogInput!read_analog_input()
		} 
		
		state Waiting
		{
			transition -> Running
			event m : AnalogInput?analog_input_value
			action do
                if (not (m.value == oldValue)) do
				    OnChangeAnalogInput!analog_input_value (m.value)
				    oldValue = m.value
                    end
			end
		}
	}	
}


enumeration PinMode 
	@java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	INPUT @enum_val "0"
	OUTPUT @enum_val "1"
}

enumeration DigitalPin 
	@java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	PIN_0 @enum_val "0"
	PIN_1 @enum_val "1"
	PIN_2 @enum_val "2"
	PIN_3 @enum_val "3"
	PIN_4 @enum_val "4"
	PIN_5 @enum_val "5"
	PIN_6 @enum_val "6"
	PIN_7 @enum_val "7"
	PIN_8 @enum_val "8"
	PIN_9 @enum_val "9"
	PIN_10 @enum_val "10"
	PIN_11 @enum_val "11"
	PIN_12 @enum_val "12"
	PIN_13 @enum_val "13"
	A_0 @enum_val "14"
	A_1 @enum_val "15"
	A_2 @enum_val "16"
	A_3 @enum_val "17"
	A_4 @enum_val "18"
	A_5 @enum_val "19"
}

enumeration PWMPin 
	@java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	PWM_PIN_3 @enum_val "3"
	PWM_PIN_5 @enum_val "5"
	PWM_PIN_6 @enum_val "6"
	PWM_PIN_9 @enum_val "9"
	PWM_PIN_10 @enum_val "10"
	PWM_PIN_11 @enum_val "11"
}


enumeration AnalogPin 
	@java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	A_0 @enum_val "14"
	A_1 @enum_val "15"
	A_2 @enum_val "16"
	A_3 @enum_val "17"
	A_4 @enum_val "18"
	A_5 @enum_val "19"
}

enumeration AnalogReference 
	@java_type "byte"
	@c_type "uint8_t"
{
	DEFAULT @enum_val "1"
	INTERNAL @enum_val "3"
	EXTERNAL @enum_val "0"
}

enumeration InterruptPin 
	@java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	PIN_2_INT0 @enum_val "0"
	PIN_3_INT1 @enum_val "1"
}

enumeration InterruptTrigger 
	@java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	CHANGE @enum_val "1"
	RISING @enum_val "3"
	FALLING @enum_val "2"
	LOW @enum_val "0"
}

thing fragment ArduinoMsgs 
@c_header "#include <EEPROM.h>"
{

	// Digital I/O
	message pin_mode (pin : DigitalPin, mode : PinMode) @code "2";
	message digital_write (pin : DigitalPin, value : DigitalState) @code "3";
	message digital_read (pin : DigitalPin) @code "4"
		@sync_response "digitalReadResult#value" @timeout "500" @retry "0";
	message digital_read_result (pin : DigitalPin, value : DigitalState) @code "5";
	
	// Analog I/O
	message analog_reference (type : AnalogReference) @code "6";
	message analog_read (pin : AnalogPin) @code "7" 
		@sync_response "analogReadResult#value" @timeout "500" @retry "0";
	message analog_read_result (pin : AnalogPin, value : Int16) @code "8";
	message analog_write (pin : PWMPin, value : UInt8) @code "9";
	
	// Advanced I/O
	message tone (pin : DigitalPin, frequency : Int16, duration : Int16) @code "10";
	message no_tone (pin : DigitalPin) @code "11";
	
	// Simple Ping
	message ping () @code "66"
		@sync_ack "pong" @timeout "1000" @retry "3" ;
	message pong () @code "67";
	
	// Interrupts
	message attach_interrupt (interrupt : InterruptPin, mode : InterruptTrigger) @code "21";
	message detach_interrupt (interrupt : InterruptPin) @code "22";
	message interrupt_notification (interrupt : InterruptPin) @code "23";
	
	// EEPROM Library
	message eeprom_read (address : Int16) @code "31"
		@sync_response "eeprom_value#value" @timeout "500" @retry "0";
	message eeprom_value (value : Int8) @code "32";
	message eeprom_write (address : Int16, value : Int8) @code "33";
	message eeprom_sync_write (address : Int16, value : Int8) @code "34"
		@sync_ack "eeprom_write_ack" @timeout "500" @retry "0" ;
	message eeprom_write_ack () @code "35";
}

thing Arduino includes ArduinoMsgs
{
	provided port DigitalIO {
		receives pin_mode, digital_read, digital_write
		sends digital_read_result
	}
	
	provided port AnalogIO {
		receives analog_reference, analog_read, analog_write
		sends analog_read_result
	}
	
	provided port AdvancedIO {
		receives tone, no_tone
	}
	
	provided port Ping {
		receives ping
		sends pong
	}
	/*
	provided port Interrupts {
		receives attach_interrupt, detach_interrupt
		sends interrupt_notification
	}
    */	
	provided port EEPROM {
		receives eeprom_read, eeprom_sync_write, eeprom_write
		sends eeprom_value, eeprom_write_ack
	}

}

thing ArduinoArduino includes Arduino
@pim "Arduino"
@platform "arduino"
{   
    // Implemetation which maps to extern calls to the arduino lib
    statechart ArduinoArduino init RunningArduino {
        state RunningArduino {
        
            internal event m : DigitalIO?pin_mode 
            action 'pinMode(' & m.pin & ', '& m.mode &');'
            
            internal event m : DigitalIO?digital_write 
            action 'digitalWrite(' & m.pin & ', '& m.value &');'
            
            internal event m : DigitalIO?digital_read 
            action DigitalIO!digital_read_result(m.pin, 'digitalRead(' & m.pin &')')
            
            internal event m : AnalogIO?analog_reference 
            action 'analogReference(' & m.type & ');'
            
            internal event m : AnalogIO?analog_read 
            action AnalogIO!analog_read_result(m.pin, 'analogRead(' & m.pin &')')
            
            internal event m : AnalogIO?analog_write 
            action 'analogWrite(' & m.pin & ', '& m.value &');'
            
            internal event m : AdvancedIO?tone 
            action 'tone(' & m.pin & ', '& m.frequency & ', '& m.duration &');'
            
            internal event m : AdvancedIO?no_tone 
            action 'noTone(' & m.pin & ');'
            
            internal event m : Ping?ping 
            action Ping!pong()
            
            internal event m : EEPROM?eeprom_read 
            action EEPROM!eeprom_value('EEPROM.read(' & m.address &')')
            
            internal event m : EEPROM?eeprom_write 
            action 'EEPROM.write('& m.address &', '& m.value &');'
            
            internal event m : EEPROM?eeprom_sync_write 
            action do 
               'EEPROM.write('& m.address &', '& m.value &');'
               EEPROM!eeprom_write_ack()
            end
                    
        }
    }
}



/*****************************************************************************
 * Definition of the ThingML scheduler messages
 *****************************************************************************/
thing fragment ThingMLSchedulerMsg {
	message setup();
	message poll();
}

thing ThingMLScheduler includes ThingMLSchedulerMsg 
{
	provided port Polling {
		sends poll, setup
	}
}

/*****************************************************************************
 * Definition of the built-in things and messages
 *****************************************************************************/
 
thing fragment TimerMsgs {
	// Start the Timer
	message timer_start(delay : Integer);
	// Cancel the Timer
	message timer_cancel();
	// Notification that the timer has expired
	message timer_timeout();
}

thing fragment Timer includes TimerMsgs
{
	provided port timer
    {
		sends timer_timeout
		receives timer_start, timer_cancel
	}
}

thing fragment TimerClient includes TimerMsgs
{
	required port timer
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
}

// Manage a set of software timers.
thing TimerArduino includes Timer, ThingMLSchedulerMsg
@pim "Timer"
@platform "arduino"
{
	required port Polling 
    {
		receives poll
	}
    
    statechart SoftTimer init Idle 
    {
        property target : Long = 0
    
        state Idle 
        {
            transition start -> Counting
            event m : timer?timer_start
            guard m.delay > 0
            action target = 'millis()' + m.delay
        }
        
        state Counting 
        {    
            transition timeout -> Idle 
            event Polling?poll
            guard not ('millis()' < target)
            after timer!timer_timeout()
                
            transition cancel -> Idle
            event m : timer?timer_cancel
                
            internal reset
            event m : timer?timer_start
            guard m.delay > 0
            action target = 'millis()' + m.delay
        }
    }
}


thing fragment TwoWDBaseMsg {
    message accelerate(v : UInt8); 
    message decelerate(v : UInt8);
    message steer_right(v : UInt8); 
    message steer_left(v : UInt8);
    message set_motors_speed(left : Int16, right : Int16);
    message stop(); 
}

thing TwoWDBase includes TwoWDBaseMsg
{
    provided port TwoWDBase {
        receives accelerate, decelerate, steer_right, steer_left, stop, set_motors_speed
    }
}

thing TwoWDBaseWithHBridge includes TwoWDBase, HBridgeMotorMsg 
{
 	required port MotorLeft {
 		 sends set_speed
 	}
 	
 	required port MotorRight {
 		sends set_speed
  	}
 	
 	property left_speed : Int16 = 0
	property right_speed : Int16 = 0
	
	function set_motors(left : Int16, right : Int16) do
		if (left > -256 and left < 256 and right > -256 and right < 256) do
			left_speed = left
			right_speed = right
			MotorLeft!set_speed(left_speed)
			MotorRight!set_speed(right_speed)
		end
	end
	
	statechart TwoWDBase init Active
	{	
		on entry set_motors(0, 0)
    	
    	internal event TwoWDBase?stop action set_motors(0, 0)
    	
		internal event m : TwoWDBase?accelerate action set_motors(left_speed + m.v, right_speed + m.v)
		internal event m : TwoWDBase?decelerate action set_motors(left_speed - m.v, right_speed - m.v)
		internal event m : TwoWDBase?steer_left action set_motors(left_speed - m.v, right_speed + m.v)
		internal event m : TwoWDBase?steer_left action set_motors(left_speed + m.v, right_speed - m.v)
		
		internal event m : TwoWDBase?set_motors_speed action set_motors(m.left, m.right)
		
		state Active {}
	}
}

thing fragment DigitalInputMsgs
{
    message read_digital_input ();
	message digital_input_value (value : DigitalState);
}

thing fragment DigitalInput includes DigitalInputMsgs
{	
	provided port DigitalInput 
    {
		receives read_digital_input
		sends digital_input_value
	}
}

thing PeriodicDigitalInput includes DigitalInputMsgs, TimerMsgs
{
	readonly property refresh_rate : Long = 5000
	
	provided port PeriodicDigitalInput 
    {
		sends digital_input_value
	}
	
	required port Timer
	{
		sends timer_start
		receives timer_timeout
	}
	
	required port DigitalInput 
    {
		sends read_digital_input
		receives digital_input_value
	}
	
	statechart PeriodicDigitalInputImpl init Running
	{			
		state Running
		{
			on entry Timer!timer_start (refresh_rate)
			
			transition -> Waiting
			event Timer?timer_timeout
			action DigitalInput!read_digital_input()
		}
		
		state Waiting
		{
			transition -> Running
			event m : DigitalInput?digital_input_value
			action PeriodicDigitalInput!digital_input_value (m.value)
		}
	}
}

thing OnChangeDigitalInput includes DigitalInputMsgs, ThingMLScheduler
{
	
	provided port OnChangeDigitalInput 
    {
		sends digital_input_value
	}
	
	required port DigitalInput 
    {
		sends read_digital_input
		receives digital_input_value
	}
    
    required port Polling 
    {
		receives poll
	}
	
    statechart OnChangeDigitalInputImpl init Low 
    {    

        // Detect changes in the io pins and send messages for every changes
        state Low 
        {    
            on entry OnChangeDigitalInput!digital_input_value (DigitalState:LOW)
            
            transition -> High
            event m: DigitalInput?digital_input_value
            guard m.value == DigitalState:HIGH   
        }
        
        state High 
        {    
            on entry OnChangeDigitalInput!digital_input_value (DigitalState:HIGH)
            
            transition pressed -> Low
            event m: DigitalInput?digital_input_value
            guard m.value == DigitalState:LOW  
        }
        
        // Region which polls the io pin (Waits for the result before polling again)
        region Polling init Poll 
        {
            state Poll 
            { 
                transition -> Wait 
                event Polling?poll 
                action DigitalInput!read_digital_input() 
            } 
            
            state Wait 
            { 
                transition -> Poll 
                event m: DigitalInput?digital_input_value 
            }  
        }
    }   
}

thing fragment PwmOutputMsgs
{
	message set_pwm_value (value : UInt8);
}

thing PwmOutput includes PwmOutputMsgs
{
	provided port Pwm
	{
		receives set_pwm_value
	}
}

thing fragment AnalogInputArduino includes AnalogInput, ArduinoMsgs
@pim "AnalogInput"
@platform "arduino"
{
	readonly property pin : AnalogPin = AnalogPin:A_4
	
	required port AnalogIO
	{
		receives analog_read_result
		sends analog_read
	}
	
	statechart SimpleAnalogInputImp init Running
	{
		state Running
		{
			transition WaitingResult -> Waiting
			event AnalogInput?read_analog_input
			action AnalogIO!analog_read (pin)
		}
		
		state Waiting
		{
			transition ResultCatched -> Running
			event m : AnalogIO?analog_read_result
			guard m.pin == pin
			action AnalogInput!analog_input_value (m.value)
		}
	}
}

configuration fragment AnalogInputArduino
{
    instance arduino : ArduinoArduino
    instance analog_input : AnalogInputArduino
    connector analog_input.AnalogIO => arduino.AnalogIO
}

configuration fragment PeriodicAnalogInputArduino
{
    instance arduino : ArduinoArduino
    
    instance analog_input : AnalogInputArduino
    connector analog_input.AnalogIO => arduino.AnalogIO
    
    instance timer : TimerArduino
    instance periodic_analog_input : PeriodicAnalogInput
    
    connector periodic_analog_input.AnalogInput => analog_input.AnalogInput
    connector periodic_analog_input.Timer => timer.timer
}

configuration fragment OnChangeAnalogInputArduino
{
    instance arduino : ArduinoArduino
    
    instance analog_input : AnalogInputArduino
    connector analog_input.AnalogIO => arduino.AnalogIO
    
    instance timer : TimerArduino
    instance change_analog_input : OnChangeAnalogInput
    
    connector change_analog_input.AnalogInput => analog_input.AnalogInput
    connector change_analog_input.Timer => timer.timer
}


thing fragment HBridgeMotorMsg {
    message set_speed(speed : Int16);
    message stop();   
}

thing fragment HBridgeMotor includes HBridgeMotorMsg, PwmOutputMsgs, DigitalOutputMsgs
{
    provided port HBridgeMotor {
        receives set_speed, stop
    }
}

thing HBridgeMotorUC includes HBridgeMotor
{
    required port Pwm {
        sends set_pwm_value
    }
    
    required port I1 {
        sends set_digital_output
    }
    
    required port I2 {
        sends set_digital_output
    }
    
    statechart HBridgeMotorUC init stoped {

    	state stoped {
    		on entry do
    			Pwm!set_pwm_value(0)
    			I1!set_digital_output(DigitalState:LOW)
    			I2!set_digital_output(DigitalState:LOW)
    		end
    		
    		transition -> forward event m : HBridgeMotor?set_speed
    		guard m.speed > 0 and m.speed < 256
    		after Pwm!set_pwm_value(m.speed)
    		
    		transition -> backward event m : HBridgeMotor?set_speed
    		guard m.speed > -256 and m.speed < 0
    		after Pwm!set_pwm_value(-m.speed)
    	}
    	
    	state forward {
    	
    		on entry do
    			I1!set_digital_output(DigitalState:LOW)
    			I2!set_digital_output(DigitalState:HIGH)
    		end
    		
    		transition -> stoped event HBridgeMotor?stop
    		
    		internal event m : HBridgeMotor?set_speed
    		guard m.speed > 0 and m.speed < 256
    		action Pwm!set_pwm_value(m.speed)
    		
    		transition -> backward event m : HBridgeMotor?set_speed
    		guard m.speed > -256 and m.speed < 0
    		action Pwm!set_pwm_value(0)
    		after Pwm!set_pwm_value(-m.speed)
    		
    		transition -> stoped event m : HBridgeMotor?set_speed
    		guard m.speed == 0
    	}
    	
    	state backward {
    	
    		on entry do
    			I1!set_digital_output(DigitalState:HIGH)
    			I2!set_digital_output(DigitalState:LOW)
    		end
    		
    		transition -> stoped event HBridgeMotor?stop
    		
    		transition -> forward event m : HBridgeMotor?set_speed
    		guard m.speed > 0 and m.speed < 256
    		action Pwm!set_pwm_value(0)
    		after Pwm!set_pwm_value(m.speed)
    		
    		internal event m : HBridgeMotor?set_speed
    		guard m.speed > -256 and m.speed < 0
    		action Pwm!set_pwm_value(-m.speed)
    		
    		transition -> stoped event m : HBridgeMotor?set_speed
    		guard m.speed == 0
    	
    	}
    
    }
    
}

thing fragment BumperMsg {
    message bump_left();
    message bump_right();
}

thing Bumper includes BumperMsg
{
    provided port Bumper {
        sends bump_left, bump_right
    }
}

thing BumperUC includes Bumper, DigitalInputMsgs
{

	required port LeftSensor {
		receives digital_input_value
	}
	
	required port RightSensor {
		receives digital_input_value
	}

   statechart BumperUCImpl init Active
	{	
	
		internal event m : LeftSensor?digital_input_value
		guard m.value == DigitalState:LOW
		action Bumper!bump_left()
		
		internal event m : RightSensor?digital_input_value
		guard m.value == DigitalState:LOW
		action Bumper!bump_right()
		
		state Active{}
	}
}

/* ThingML Framework */

/*****************************************************************************
 * Definition of the default ThingML DataTypes
 * The size of Java primitive types is given here: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
 * TODO: some information is missing to properly serialize/deserialize some types, typically UInt and Int, which have the same size, but different encodings
 *****************************************************************************/
datatype Byte	
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "Byte"
    @SenML_type "Double";

datatype Boolean	
	@c_type "uint8_t"
	@c_byte_size "2"
	@java_type "Boolean"
    @SenML_type "Boolean";

datatype Integer	
	@c_type "int"
	@c_byte_size "2"
	@java_type "Short"
    @SenML_type "Double"
    @ros_type "int16";
	
datatype UInt8	
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "Byte"
    @SenML_type "Double";
	
datatype Int8	
	@c_type "int8_t"
	@c_byte_size "1"
	@java_type "Byte"
    @SenML_type "Double";

datatype UInt16	
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "Short"
    @SenML_type "Double";

datatype Int16	
	@c_type "int"
    @c_byte_size "2"
	@java_type "Short"
    @SenML_type "Double";


datatype Long	
	@c_type "long"
	@c_byte_size "4"
	@java_type "Integer"
    @scala_type "Int"
    @SenML_type "Double";
	
datatype ULong	
	@c_type "unsigned long"
	@c_byte_size "4"
	@java_type "Integer"
    @scala_type "Int"
    @SenML_type "Double";

datatype Double	
	@c_type "double"
	@c_byte_size "4"
	@java_type "Float"
    @SenML_type "Double";

datatype Char	
	@c_type "char"
	@c_byte_size "1"
	@java_type "Char"
    @SenML_type "String";

datatype String
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String"
    @SenML_type "String";
	
enumeration DigitalState 
	@java_type "Byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}




enumeration Obstacle	
    @java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	NONE @enum_val "0"
	LEFT @enum_val "1"
	RIGHT @enum_val "2"
	FRONT @enum_val "3"
}

thing LightFollower includes TwoWDBaseMsg, AnalogInputMsgs, TimerMsgs, LedMsgs, BumperMsg
{
 	required port TwoWDBase {
 		 sends set_motors_speed, stop
 	}
 	
 	property left_speed : Int16 = 0
	property right_speed : Int16 = 0
 	
 	required port RightLight {
 		receives analog_input_value
 	}
 	
 	required port LeftLight {
 		receives analog_input_value
 	}
 	
 	property left_light : Int16 = 0
	property right_light : Int16 = 0
 	
 	required port Timer {
 		 sends timer_start, timer_cancel
 		 receives timer_timeout
 	}
    
    required port FrontBumper {
        receives bump_left, bump_right
    }	
    
    required port Led {
        sends led_on, led_toggle
    }	
 
 	function follow_light() do
 		var diff : Int16 = (left_light - right_light) / 2
 		if (diff > 50) diff = 50
        if (diff < -50) diff = -50
 		left_speed = 127 - diff
 		right_speed = 127 + diff
		TwoWDBase!set_motors_speed(left_speed, right_speed)
	end
	
	statechart LightFollowerImpl init Init
	{	
        property obstacle : Obstacle = Obstacle:NONE
        
        on entry Led!led_on()
		
		internal event m : RightLight?analog_input_value 
		action right_light = m.value
		
		internal event m : LeftLight?analog_input_value 
		action left_light = m.value

        state Init {
            
            on entry Timer!timer_start(500)
            
            transition -> SeekLight event Timer?timer_timeout
        }

		
		state SeekLight {
		
			on entry Timer!timer_start(25)
			
			transition -> SeekLight event Timer?timer_timeout
			action do 
                Led!led_toggle()
                follow_light()
            end
            
            transition -> AvoidObstacle event FrontBumper?bump_left
            action obstacle = Obstacle:LEFT
            
            transition -> AvoidObstacle event FrontBumper?bump_right
            action obstacle = Obstacle:RIGHT
            
		}
		
		composite state AvoidObstacle init back {

			on entry TwoWDBase!stop()
			
			state back {
				on entry do 
					TwoWDBase!set_motors_speed(-75, -75)
					Timer!timer_cancel()
					Timer!timer_start(1000)
				end
				
				transition -> turn event Timer?timer_timeout
			}
			
			state turn {
				on entry do 
					if (obstacle == Obstacle:RIGHT) TwoWDBase!set_motors_speed(-60, 60)
                    if (not (obstacle == Obstacle:RIGHT)) TwoWDBase!set_motors_speed(60, -60)
					Timer!timer_start(750)
				end
                
                transition -> turn event Timer?timer_timeout
                action do
                    TwoWDBase!set_motors_speed(0, 0)
                    Timer!timer_start(250)
                    obstacle = Obstacle:NONE
                end
			}
			
			transition -> SeekLight event Timer?timer_timeout
            guard obstacle == Obstacle:NONE
		}
	}
}

thing DigitalOutputArduino includes DigitalOutput, ArduinoMsgs
@pim "DigitalOutput"
@platform "arduino"
{	
	readonly property pin : DigitalPin = DigitalPin:PIN_13
	
	required port DigitalIO
    {
        sends pin_mode, digital_write    
    }
    
    statechart DigitalOutpuImpl init Running
    {
    	on entry DigitalIO!pin_mode (pin, PinMode:OUTPUT)
    	
    	state Running
    	{
    		internal event m : DigitalOutput?set_digital_output
    		action DigitalIO!digital_write (pin, m.value)
    	}
    }
}

thing fragment DigitalInputArduino includes DigitalInput, ArduinoMsgs
@pim "DigitalInput"
@platform "arduino"
{	
	readonly property pin : DigitalPin = DigitalPin:PIN_3
    readonly property pullup : Boolean = false
	
	required port DigitalIO
    {
        sends pin_mode, digital_read, digital_write
		receives digital_read_result    
    }
    
    statechart SimpleDigitalInputImpl init Idle 
    {    
        // Global initialization of the pin
        on entry do
        	DigitalIO!pin_mode (pin, PinMode:INPUT)
            if (pullup) DigitalIO!digital_write (pin, DigitalState:HIGH) // pull-up
        end
        
        state Idle 
        { 
            transition -> Waiting 
            event DigitalInput?read_digital_input
            action DigitalIO!digital_read (pin)
        }
            
        state Waiting 
        {
            transition -> Idle 
            event m : DigitalIO?digital_read_result 
            guard m.pin == pin
            action DigitalInput!digital_input_value (m.value)
        }    
    }       
}

thing PwmOutputArduino includes PwmOutput, ArduinoMsgs
@pim "PwmOutput"
@platform "arduino"
{
	readonly property pin : PWMPin = PWMPin:PWM_PIN_3

    
    required port DigitalIO
	{
		sends pin_mode
	}

	required port AnalogIO
	{
		sends analog_write
	}
	
	statechart PwmOutputArduinoImpl init Running
	{
		state Running
		{
            on entry DigitalIO!pin_mode(pin, PinMode:OUTPUT)
    
			internal event m : Pwm?set_pwm_value
			action AnalogIO!analog_write (pin, m.value)
		}
	}
}

configuration fragment PwmOutputArduino
{
	instance arduino : ArduinoArduino
	
	instance pwm : PwmOutputArduino
	connector pwm.AnalogIO => arduino.AnalogIO
}

configuration fragment DigitalInputArduino
{
    instance arduino : ArduinoArduino
    instance digital_input : DigitalInputArduino
    connector digital_input.DigitalIO => arduino.DigitalIO
}

configuration fragment PeriodicDigitalInputArduino
{
    instance arduino : ArduinoArduino
	instance timer : TimerArduino
	
	instance digital_input : DigitalInputArduino
    connector digital_input.DigitalIO => arduino.DigitalIO

    instance periodic_digital_input : PeriodicDigitalInput
    connector periodic_digital_input.DigitalInput => digital_input.DigitalInput
    connector periodic_digital_input.Timer => timer.timer
}

configuration fragment OnChangeDigitalInputArduino
{
    instance arduino : ArduinoArduino

	instance digital_input : DigitalInputArduino
    connector digital_input.DigitalIO => arduino.DigitalIO

    instance change_digital_input : OnChangeDigitalInput
    connector change_digital_input.DigitalInput => digital_input.DigitalInput
}

configuration fragment DigitalOutputArduino
{
    instance arduino : ArduinoArduino

    instance digital_output : DigitalOutputArduino
    connector digital_output.DigitalIO => arduino.DigitalIO
}

configuration fragment LedArduino
{
    group io : DigitalOutputArduino

    instance led : LedUC	 
    connector led.DigitalOutput => io.digital_output.DigitalOutput
} 

configuration fragment BumperArduino {

	instance bumper : BumperUC

	group leftin : OnChangeDigitalInputArduino
	//set leftin.digital_input.pin = DigitalPin:PIN_3
	//set leftin.digital_input.pullup = true
	
	group rightin : OnChangeDigitalInputArduino
	//set rightin.digital_input.pin = DigitalPin:PIN_4
	//set rightin.digital_input.pullup = false
	
	connector bumper.LeftSensor => leftin.change_digital_input.OnChangeDigitalInput
	connector bumper.RightSensor => rightin.change_digital_input.OnChangeDigitalInput
}

configuration fragment HBridgeMotorArduino {

	instance hbridge : HBridgeMotorUC

	group i1 : DigitalOutputArduino
	set i1.digital_output.pin = DigitalPin:PIN_11
	connector hbridge.I1 => i1.digital_output.DigitalOutput
	
	group i2 : DigitalOutputArduino
	set i2.digital_output.pin = DigitalPin:PIN_12
	connector hbridge.I2 => i2.digital_output.DigitalOutput
	
	group pwm : PwmOutputArduino
	set pwm.pwm.pin = PWMPin:PWM_PIN_10
	connector hbridge.Pwm => pwm.pwm.Pwm

}

configuration fragment TwoWDBaseWithHBridgeArduino {

	instance base : TwoWDBaseWithHBridge
	
	group mleft : HBridgeMotorArduino
	set mleft.i1.digital_output.pin = DigitalPin:PIN_8
	set mleft.i2.digital_output.pin = DigitalPin:PIN_7
	set mleft.pwm.pwm.pin = PWMPin:PWM_PIN_9
	
	group mright : HBridgeMotorArduino
	set mright.i1.digital_output.pin = DigitalPin:PIN_11
	set mright.i2.digital_output.pin = DigitalPin:PIN_12
	set mright.pwm.pwm.pin = PWMPin:PWM_PIN_10
	
	connector base.MotorLeft => mleft.hbridge.HBridgeMotor
	connector base.MotorRight => mright.hbridge.HBridgeMotor
	
}

configuration LightFollowerArduino {

	instance robot : LightFollower
	
	group motors : TwoWDBaseWithHBridgeArduino
	connector robot.TwoWDBase => motors.base.TwoWDBase
	
	instance timer : TimerArduino
	connector robot.Timer => timer.timer
	
	group l1 : PeriodicAnalogInputArduino
	set l1.analog_input.pin = AnalogPin:A_0
	set l1.periodic_analog_input.refresh_rate = 10
	connector robot.LeftLight => l1.periodic_analog_input.PeriodicAnalogInput
	
	group l2 : PeriodicAnalogInputArduino
	set l2.analog_input.pin = AnalogPin:A_1
	set l2.periodic_analog_input.refresh_rate = 10
	connector robot.RightLight => l2.periodic_analog_input.PeriodicAnalogInput

    group led : LedArduino
    set led.io.digital_output.pin = DigitalPin:PIN_13
    connector robot.Led => led.led.Led
    
    group bumper : BumperArduino
    set bumper.leftin.digital_input.pin = DigitalPin:PIN_5
    set bumper.leftin.digital_input.pullup = true
	set bumper.rightin.digital_input.pin = DigitalPin:PIN_6
    set bumper.rightin.digital_input.pullup = true
	connector robot.FrontBumper => bumper.bumper.Bumper
	
}